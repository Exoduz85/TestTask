#pragma kernel CSCreateSphere
#pragma kernel CSCreateCone

#define PI 3.141592653589793238462643383279502884197 // approximation of PI with 39 decimals
#define MAX_SPHERE_THREADS 8 // optimal for 64 (8x8)
#define MAX_CONE_THREADS 64 // 1d of 64 threads for optimal usage

// buffers
RWStructuredBuffer<float3> vertices;
RWStructuredBuffer<int> triangles;

// sphere settings
int sphereResolution;
int sphereVertexOffset;
int sphereTriangleOffset;
float sphereRadius;

// cone settings
int coneResolution;
int coneVertexOffset;
int coneTriangleOffset;
float coneBaseRadius;
float coneLength;

[numthreads(MAX_SPHERE_THREADS,MAX_SPHERE_THREADS,1)]
void CSCreateSphere(uint3 id : SV_DispatchThreadID)
{
    uint x = id.x;
    uint y = id.y;

    if (x >= sphereResolution || y >= sphereResolution)
        return;

    uint index = y * sphereResolution + x;
    float u = (float)x / (sphereResolution - 1);
    float v = (float)y / (sphereResolution - 1);

    float theta = u * 2.0f * PI;
    float phi = v * PI;

    float3 pos;
    pos.x = sin(phi) * cos(theta);
    pos.y = cos(phi);
    pos.z = sin(phi) * sin(theta);

    pos *= sphereRadius;

    vertices[sphereVertexOffset + index] = pos;

    if (x < sphereResolution - 1 && y < sphereResolution - 1)
    {
        int i0 = index;
        int i1 = i0 + 1;
        int i2 = i0 + sphereResolution;
        int i3 = i2 + 1;

        int t = (y * (sphereResolution - 1) + x) * 6;

        triangles[sphereTriangleOffset + t + 0] = sphereVertexOffset + i0;
        triangles[sphereTriangleOffset + t + 1] = sphereVertexOffset + i2;
        triangles[sphereTriangleOffset + t + 2] = sphereVertexOffset + i1;

        triangles[sphereTriangleOffset + t + 3] = sphereVertexOffset + i1;
        triangles[sphereTriangleOffset + t + 4] = sphereVertexOffset + i2;
        triangles[sphereTriangleOffset + t + 5] = sphereVertexOffset + i3;
    }
}

[numthreads(MAX_CONE_THREADS, 1, 1)]
void CSCreateCone (uint3 id : SV_DispatchThreadID)
{
    uint i = id.x;
    if (i >= coneResolution)
        return;

    float angle = (i / (float)coneResolution) * 2.0f * PI;
    float3 basePos = float3(cos(angle) * coneBaseRadius, sin(angle) * coneBaseRadius, 1.0f);
    float3 tipPos = float3(0, 0, 1.0f + coneLength);

    vertices[coneVertexOffset + i] = basePos;

    if (i == 0)
    {
        vertices[coneVertexOffset + coneResolution] = tipPos;
    }

    if (i < coneResolution)
    {
        int next = (i + 1) % coneResolution;
        int base0 = coneVertexOffset + i;
        int base1 = coneVertexOffset + next;
        int tip   = coneVertexOffset + coneResolution;

        int t = coneTriangleOffset + i * 3;
        triangles[t + 0] = base0;
        triangles[t + 1] = base1;
        triangles[t + 2] = tip;
    }
}